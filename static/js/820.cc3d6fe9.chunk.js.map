{"version":3,"file":"static/js/820.cc3d6fe9.chunk.js","mappings":"gVAGAA,IAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAS,CACbA,OAAQ,CAAEC,QAAS,qCAGRC,EAAgB,mCAAG,+GAELH,IAAAA,IAAU,sBAAuBC,GAF5B,cAEtBG,EAFsB,OAGtBC,EAAaD,EAASE,KAAKC,QAHL,kBAIrBF,GAJqB,gCAM5BG,EAAAA,GAAAA,MAAY,kCANgB,yDAAH,qDAUhBC,EAAW,mCAAG,WAAMC,GAAN,kGAEAV,IAAAA,IAAA,iBAAoBU,GAAUT,GAF9B,cAEjBG,EAFiB,OAIjBO,EAAeP,EAASE,KAJP,kBAKhBK,GALgB,gCAOvBH,EAAAA,GAAAA,MAAY,kCAPW,yDAAH,sDAWXI,EAAW,mCAAG,WAAMF,GAAN,kGAEAV,IAAAA,IAAA,iBAAoBU,EAApB,YAAsCT,GAFtC,cAEjBG,EAFiB,OAGjBS,EAAWT,EAASE,KAAKQ,KAHR,kBAIhBD,GAJgB,gCAMvBL,EAAAA,GAAAA,MAAY,kCANW,yDAAH,sDAUXO,EAAc,mCAAG,WAAML,GAAN,kGAEHV,IAAAA,IAAA,iBAAoBU,EAApB,YAAsCT,GAFnC,cAEpBG,EAFoB,OAGpBY,EAAcZ,EAASE,KAAKC,QAHR,kBAInBS,GAJmB,gCAM1BR,EAAAA,GAAAA,MAAY,kCANc,yDAAH,sDAUdS,EAAc,mCAAG,WAAMC,GAAN,kGAEHlB,IAAAA,IAAA,gBAA2B,CAChDC,QAAO,kBACFA,EAAOA,QADN,IAEJiB,MAAOA,MALe,cAEpBd,EAFoB,OASpBe,EAAef,EAASE,KAAKC,QATT,kBAUnBY,GAVmB,gCAY1BX,EAAAA,GAAAA,MAAY,kCAZc,yDAAH,uD,gICK3B,EAnDqB,WAAO,IAAD,IACnBY,GAAWC,EAAAA,EAAAA,MACTC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAsCE,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,MAEAC,EAAAA,EAAAA,YAAU,YACRlB,EAAAA,EAAAA,IAAYa,GAASM,MAAK,SAAAC,GACxB,GAAIA,EACF,OAAOH,EAAeG,QAGzB,CAACP,IAEJ,IAAQQ,EACNL,EADMK,OAAQC,EACdN,EADcM,MAAOC,EACrBP,EADqBO,aAAcC,EACnCR,EADmCQ,SAAUC,EAC7CT,EAD6CS,aAAcC,EAC3DV,EAD2DU,YAG7D,OACE,iCACE,SAAC,KAAD,CAAMC,GAAE,iBAAEhB,QAAF,IAAEA,GAAF,UAAEA,EAAUiB,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,IAAnC,qBACCb,IACC,4BACE,8BACE,4BACE,gBACEc,IAAG,yCAAoCJ,GACvCK,IAAI,YAEN,4BACE,0BACGT,EADH,KACYG,EAAaO,UAAU,EAAG,GADtC,QAGA,wCAA+B,GAAfT,EAAhB,QACA,sCACA,uBAAIC,KACJ,oCACA,uBAAIH,EAAOY,KAAI,SAAAC,GAAK,OAAIA,EAAMC,QAAMC,KAAK,gBAI/C,gCACE,oDACA,SAAC,KAAD,CAAMT,GAAE,OAAR,mBACA,SAAC,KAAD,CAAMA,GAAE,UAAR,yBAEF,SAAC,KAAD","sources":["service/api.js","views/MovieDetails/MovieDetails.js"],"sourcesContent":["import axios from 'axios';\nimport toast from 'react-hot-toast';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst params = {\n  params: { api_key: '6b956d9320e8e098b01748da89295179' },\n};\n\nexport const getTrendingFilms = async () => {\n  try {\n    const response = await axios.get('/trending/movie/day', params);\n    const filmsArray = response.data.results;\n    return filmsArray;\n  } catch (error) {\n    toast.error('Ups... Something went wrong :(');\n  }\n};\n\nexport const getFilmById = async filmId => {\n  try {\n    const response = await axios.get(`/movie/${filmId}`, params);\n\n    const filmsDetails = response.data;\n    return filmsDetails;\n  } catch (error) {\n    toast.error('Ups... Something went wrong :(');\n  }\n};\n\nexport const getFilmCast = async filmId => {\n  try {\n    const response = await axios.get(`/movie/${filmId}/credits`, params);\n    const filmCast = response.data.cast;\n    return filmCast;\n  } catch (error) {\n    toast.error('Ups... Something went wrong :(');\n  }\n};\n\nexport const getFilmReviews = async filmId => {\n  try {\n    const response = await axios.get(`/movie/${filmId}/reviews`, params);\n    const filmReviews = response.data.results;\n    return filmReviews;\n  } catch (error) {\n    toast.error('Ups... Something went wrong :(');\n  }\n};\n\nexport const getFilmByQuery = async query => {\n  try {\n    const response = await axios.get(`/search/movie`, {\n      params: {\n        ...params.params,\n        query: query,\n      },\n    });\n\n    const filmsByQuery = response.data.results;\n    return filmsByQuery;\n  } catch (error) {\n    toast.error('Ups... Something went wrong :(');\n  }\n};\n","import { useState, useEffect } from 'react';\nimport { Link, useParams, Outlet, useLocation } from 'react-router-dom';\nimport { getFilmById } from 'service/api';\n\nconst MovieDetails = () => {\n  const location = useLocation();\n  const { movieId } = useParams();\n  const [filmDetails, setАilmDetails] = useState('');\n\n  useEffect(() => {\n    getFilmById(movieId).then(res => {\n      if (res) {\n        return setАilmDetails(res);\n      }\n    });\n  }, [movieId]);\n\n  const { genres, title, vote_average, overview, release_date, poster_path } =\n    filmDetails;\n\n  return (\n    <>\n      <Link to={location?.state?.from ?? '/'}>Go back</Link>\n      {filmDetails && (\n        <div>\n          <section>\n            <div>\n              <img\n                src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n                alt=\"poster\"\n              />\n              <div>\n                <h2>\n                  {title} ({release_date.substring(0, 4)})\n                </h2>\n                <p>User Score: {vote_average * 10}%</p>\n                <h3>Overview</h3>\n                <p>{overview}</p>\n                <h3>Genres</h3>\n                <p>{genres.map(genre => genre.name).join(' ')}</p>\n              </div>\n            </div>\n          </section>\n          <section>\n            <h2>Additional information</h2>\n            <Link to={`cast`}>cast</Link>\n            <Link to={`reviews`}>reviews</Link>\n          </section>\n          <Outlet />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["axios","params","api_key","getTrendingFilms","response","filmsArray","data","results","toast","getFilmById","filmId","filmsDetails","getFilmCast","filmCast","cast","getFilmReviews","filmReviews","getFilmByQuery","query","filmsByQuery","location","useLocation","movieId","useParams","useState","filmDetails","setАilmDetails","useEffect","then","res","genres","title","vote_average","overview","release_date","poster_path","to","state","from","src","alt","substring","map","genre","name","join"],"sourceRoot":""}