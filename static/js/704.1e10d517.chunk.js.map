{"version":3,"file":"static/js/704.1e10d517.chunk.js","mappings":"wMAiCA,EA9BiB,SAAC,GAAsB,IAApBA,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MACnBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,gCACGF,IAAS,wBAAKA,KACf,wBACGD,EAAMI,KAAI,YAAoB,IAAjBH,EAAgB,EAAhBA,MAAOI,EAAS,EAATA,GACnB,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,GAAME,MAAO,CAAEC,KAAMN,GAA1C,SACGD,KAFII,a,8NCTrBI,IAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAS,CACbA,OAAQ,CAAEC,QAAS,qCAGRC,EAAgB,mCAAG,+GAELH,IAAAA,IAAU,sBAAuBC,GAF5B,cAEtBG,EAFsB,OAGtBC,EAAaD,EAASE,KAAKC,QAHL,kBAIrBF,GAJqB,gCAM5BG,EAAAA,GAAAA,MAAY,kCANgB,yDAAH,qDAUhBC,EAAW,mCAAG,WAAMC,GAAN,kGAEAV,IAAAA,IAAA,iBAAoBU,GAAUT,GAF9B,cAEjBG,EAFiB,OAIjBO,EAAeP,EAASE,KAJP,kBAKhBK,GALgB,gCAOvBH,EAAAA,GAAAA,MAAY,kCAPW,yDAAH,sDAWXI,EAAW,mCAAG,WAAMF,GAAN,kGAEAV,IAAAA,IAAA,iBAAoBU,EAApB,YAAsCT,GAFtC,cAEjBG,EAFiB,OAGjBS,EAAWT,EAASE,KAAKQ,KAHR,kBAIhBD,GAJgB,gCAMvBL,EAAAA,GAAAA,MAAY,kCANW,yDAAH,sDAUXO,EAAc,mCAAG,WAAML,GAAN,kGAEHV,IAAAA,IAAA,iBAAoBU,EAApB,YAAsCT,GAFnC,cAEpBG,EAFoB,OAGpBY,EAAcZ,EAASE,KAAKC,QAHR,kBAInBS,GAJmB,gCAM1BR,EAAAA,GAAAA,MAAY,kCANc,yDAAH,sDAUdS,EAAc,mCAAG,WAAMC,GAAN,kGAEHlB,IAAAA,IAAA,gBAA2B,CAChDC,QAAO,kBACFA,EAAOA,QADN,IAEJiB,MAAOA,MALe,cAEpBd,EAFoB,OASpBe,EAAef,EAASE,KAAKC,QATT,kBAUnBY,GAVmB,gCAY1BX,EAAAA,GAAAA,MAAY,kCAZc,yDAAH,uD,sHC7CdY,EAAgB,CAC3BF,MAAO,IAGHG,EAASC,EAAAA,GAAW,CACxBJ,MAAOI,EAAAA,KAAaC,aA4BtB,EAzBmB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBAKpB,OACE,0BACE,SAAC,KAAD,CACEJ,cAAeA,EACfK,iBAAkBJ,EAClBK,SATe,SAAAC,GACnBH,EAAgB,CAAEN,MAAOS,EAAMT,MAAMU,UAKnC,UAKE,UAAC,KAAD,CAAMC,aAAa,MAAnB,WACE,SAAC,KAAD,CAAOC,KAAK,OAAOC,KAAK,QAAQC,YAAY,2BAC5C,mBAAQF,KAAK,SAAb,4B,wCCOV,EA3Be,WACb,OAAwCG,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBV,EAArB,KACMN,EAAQgB,EAAaC,IAAI,SAC/B,GAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOjB,EAAP,KAAqBkB,EAArB,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACHpB,IAGLD,EAAAA,EAAAA,IAAeC,GAAOqB,MAAK,SAAAC,GACrBA,EAAIC,OAAS,EACfJ,EAAgBG,GAEhBhC,EAAAA,GAAAA,MAAY,oDAGf,CAACU,KAGF,4BACE,SAAC,EAAD,CAAYM,gBAAiBA,IAE5BL,EAAasB,OAAS,IAAK,SAACC,EAAA,EAAD,CAAUnD,MAAO4B","sources":["components/FilmList/FilmList.js","service/api.js","components/SearchForm/SearchForm.js","views/Movies/Movies.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst FilmList = ({ films, title }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      {title && <h1>{title}</h1>}\n      <ul>\n        {films.map(({ title, id }) => {\n          return (\n            <li key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                {title}\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nFilmList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    })\n  ),\n  title: PropTypes.string,\n};\n\nexport default FilmList;\n","import axios from 'axios';\nimport toast from 'react-hot-toast';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst params = {\n  params: { api_key: '6b956d9320e8e098b01748da89295179' },\n};\n\nexport const getTrendingFilms = async () => {\n  try {\n    const response = await axios.get('/trending/movie/day', params);\n    const filmsArray = response.data.results;\n    return filmsArray;\n  } catch (error) {\n    toast.error('Ups... Something went wrong :(');\n  }\n};\n\nexport const getFilmById = async filmId => {\n  try {\n    const response = await axios.get(`/movie/${filmId}`, params);\n\n    const filmsDetails = response.data;\n    return filmsDetails;\n  } catch (error) {\n    toast.error('Ups... Something went wrong :(');\n  }\n};\n\nexport const getFilmCast = async filmId => {\n  try {\n    const response = await axios.get(`/movie/${filmId}/credits`, params);\n    const filmCast = response.data.cast;\n    return filmCast;\n  } catch (error) {\n    toast.error('Ups... Something went wrong :(');\n  }\n};\n\nexport const getFilmReviews = async filmId => {\n  try {\n    const response = await axios.get(`/movie/${filmId}/reviews`, params);\n    const filmReviews = response.data.results;\n    return filmReviews;\n  } catch (error) {\n    toast.error('Ups... Something went wrong :(');\n  }\n};\n\nexport const getFilmByQuery = async query => {\n  try {\n    const response = await axios.get(`/search/movie`, {\n      params: {\n        ...params.params,\n        query: query,\n      },\n    });\n\n    const filmsByQuery = response.data.results;\n    return filmsByQuery;\n  } catch (error) {\n    toast.error('Ups... Something went wrong :(');\n  }\n};\n","import React from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport * as yup from 'yup';\nimport PropTypes from 'prop-types';\n\nexport const initialValues = {\n  query: '',\n};\n\nconst schema = yup.object({\n  query: yup.string().required(),\n});\n\nconst SearchForm = ({ setSearchParams }) => {\n  const handleSubmit = value => {\n    setSearchParams({ query: value.query.trim() });\n  };\n\n  return (\n    <div>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <Form autoComplete=\"off\">\n          <Field type=\"text\" name=\"query\" placeholder=\"Please, enter a query\" />\n          <button type=\"submit\">Search</button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n\nSearchForm.propTypes = {\n  setSearchParams: PropTypes.func.isRequired,\n};\n\nexport default SearchForm;\n","import SearchForm from 'components/SearchForm';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getFilmByQuery } from 'service/api';\nimport FilmList from 'components/FilmList';\nimport toast from 'react-hot-toast';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n  const [filmsByQuery, setFilmsByQuery] = useState([]);\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n    getFilmByQuery(query).then(res => {\n      if (res.length > 0) {\n        setFilmsByQuery(res);\n      } else {\n        toast.error('Sorry, there are no movies for your request');\n      }\n    });\n  }, [query]);\n\n  return (\n    <div>\n      <SearchForm setSearchParams={setSearchParams} />\n\n      {filmsByQuery.length > 0 && <FilmList films={filmsByQuery} />}\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["films","title","location","useLocation","map","id","to","state","from","axios","params","api_key","getTrendingFilms","response","filmsArray","data","results","toast","getFilmById","filmId","filmsDetails","getFilmCast","filmCast","cast","getFilmReviews","filmReviews","getFilmByQuery","query","filmsByQuery","initialValues","schema","yup","required","setSearchParams","validationSchema","onSubmit","value","trim","autoComplete","type","name","placeholder","useSearchParams","searchParams","get","useState","setFilmsByQuery","useEffect","then","res","length","FilmList"],"sourceRoot":""}